create table "public"."expense_beneficiaries" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "expense_id" bigint not null,
    "beneficiary_id" uuid not null default gen_random_uuid(),
    "share" bigint not null
);


alter table "public"."expense_beneficiaries" enable row level security;

create table "public"."expenses" (
    "id" bigint generated by default as identity not null,
    "group_id" bigint not null,
    "payer_id" uuid default gen_random_uuid(),
    "amount" bigint not null,
    "description" text,
    "created_at" timestamp with time zone not null default now(),
    "creator_id" uuid not null,
    "title" text not null
);


alter table "public"."expenses" enable row level security;

alter table "public"."groups" drop column "group_name";

alter table "public"."groups" add column "access_code" text not null;

alter table "public"."groups" add column "image_url" text;

alter table "public"."groups" add column "locked" boolean not null default false;

alter table "public"."groups" add column "name" character varying not null;

alter table "public"."groups_profiles" add column "is_admin" boolean not null;

alter table "public"."profiles" add column "image_url" text;

CREATE UNIQUE INDEX expense_beneficiaries_pkey ON public.expense_beneficiaries USING btree (id);

CREATE UNIQUE INDEX expenses_pkey ON public.expenses USING btree (id);

alter table "public"."expense_beneficiaries" add constraint "expense_beneficiaries_pkey" PRIMARY KEY using index "expense_beneficiaries_pkey";

alter table "public"."expenses" add constraint "expenses_pkey" PRIMARY KEY using index "expenses_pkey";

alter table "public"."expense_beneficiaries" add constraint "expense_beneficiaries_beneficiary_id_fkey" FOREIGN KEY (beneficiary_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."expense_beneficiaries" validate constraint "expense_beneficiaries_beneficiary_id_fkey";

alter table "public"."expense_beneficiaries" add constraint "expense_beneficiaries_expense_id_fkey" FOREIGN KEY (expense_id) REFERENCES expenses(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."expense_beneficiaries" validate constraint "expense_beneficiaries_expense_id_fkey";

alter table "public"."expenses" add constraint "expenses_creator_id_fkey" FOREIGN KEY (creator_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."expenses" validate constraint "expenses_creator_id_fkey";

alter table "public"."expenses" add constraint "expenses_group_id_fkey" FOREIGN KEY (group_id) REFERENCES groups(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."expenses" validate constraint "expenses_group_id_fkey";

alter table "public"."expenses" add constraint "expenses_payer_id_fkey" FOREIGN KEY (payer_id) REFERENCES profiles(id) ON UPDATE CASCADE ON DELETE SET NULL not valid;

alter table "public"."expenses" validate constraint "expenses_payer_id_fkey";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.create_group(name text, access_code text)
 RETURNS TABLE(group_id integer)
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO 'public'
AS $function$
declare
  current_user_id uuid;
  new_group_id integer;
begin
  current_user_id := auth.uid();

  if current_user_id is null then
    raise exception 'Brak uwierzytelnionego uÅ¼ytkownika';
  end if;

  insert into groups(name, access_code)
  values (name, access_code)
  returning id into new_group_id;

  insert into groups_profiles(group_id, user_id, is_admin)
  values (new_group_id, current_user_id, true);

  return query select new_group_id as group_id;
end;
$function$
;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
 SET search_path TO ''
AS $function$
begin
  insert into public.profiles (id, username)
  values (new.id, new.raw_user_meta_data ->> 'username');
  return new;
end;
$function$
;

grant delete on table "public"."expense_beneficiaries" to "anon";

grant insert on table "public"."expense_beneficiaries" to "anon";

grant references on table "public"."expense_beneficiaries" to "anon";

grant select on table "public"."expense_beneficiaries" to "anon";

grant trigger on table "public"."expense_beneficiaries" to "anon";

grant truncate on table "public"."expense_beneficiaries" to "anon";

grant update on table "public"."expense_beneficiaries" to "anon";

grant delete on table "public"."expense_beneficiaries" to "authenticated";

grant insert on table "public"."expense_beneficiaries" to "authenticated";

grant references on table "public"."expense_beneficiaries" to "authenticated";

grant select on table "public"."expense_beneficiaries" to "authenticated";

grant trigger on table "public"."expense_beneficiaries" to "authenticated";

grant truncate on table "public"."expense_beneficiaries" to "authenticated";

grant update on table "public"."expense_beneficiaries" to "authenticated";

grant delete on table "public"."expense_beneficiaries" to "service_role";

grant insert on table "public"."expense_beneficiaries" to "service_role";

grant references on table "public"."expense_beneficiaries" to "service_role";

grant select on table "public"."expense_beneficiaries" to "service_role";

grant trigger on table "public"."expense_beneficiaries" to "service_role";

grant truncate on table "public"."expense_beneficiaries" to "service_role";

grant update on table "public"."expense_beneficiaries" to "service_role";

grant delete on table "public"."expenses" to "anon";

grant insert on table "public"."expenses" to "anon";

grant references on table "public"."expenses" to "anon";

grant select on table "public"."expenses" to "anon";

grant trigger on table "public"."expenses" to "anon";

grant truncate on table "public"."expenses" to "anon";

grant update on table "public"."expenses" to "anon";

grant delete on table "public"."expenses" to "authenticated";

grant insert on table "public"."expenses" to "authenticated";

grant references on table "public"."expenses" to "authenticated";

grant select on table "public"."expenses" to "authenticated";

grant trigger on table "public"."expenses" to "authenticated";

grant truncate on table "public"."expenses" to "authenticated";

grant update on table "public"."expenses" to "authenticated";

grant delete on table "public"."expenses" to "service_role";

grant insert on table "public"."expenses" to "service_role";

grant references on table "public"."expenses" to "service_role";

grant select on table "public"."expenses" to "service_role";

grant trigger on table "public"."expenses" to "service_role";

grant truncate on table "public"."expenses" to "service_role";

grant update on table "public"."expenses" to "service_role";

create policy "Allow all for authenticated"
on "public"."expense_beneficiaries"
as permissive
for all
to authenticated
using (true);


create policy "Allow all authenticated"
on "public"."expenses"
as permissive
for all
to authenticated
using (true);


create policy "Allow update for authenticated"
on "public"."groups"
as permissive
for update
to public
using (true);


create policy "Allow select for authenticated"
on "public"."groups_profiles"
as permissive
for select
to authenticated
using (true);



